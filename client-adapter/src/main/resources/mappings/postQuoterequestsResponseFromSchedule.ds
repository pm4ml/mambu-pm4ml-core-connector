local getLoanByIdResponse = cml.exchangeProperty('getLoanByIdResponse')[0];
local origPayload = cml.exchangeProperty('origPayload');
local getLoanScheduleByIdResponse = payload;

local loanSchedule = getLoanScheduleByIdResponse.installments;
local pendingInstallments = std.filter(function(i) i.state == "PENDING", loanSchedule);

local calcTotalDue(installment) =
  installment.principal.amount.expected +
  installment.interest.amount.expected +
  installment.fee.amount.expected +
  installment.penalty.amount.expected;

local amountDue = if (pendingInstallments != [])
                  then std.toString(calcTotalDue(pendingInstallments[0]))
                  else "0";

local dueDate = if (pendingInstallments != [])
                then std.substr(pendingInstallments[0].dueDate, 0, 10)
                else "";

local extensionList = std.filter(function(item) item != null, [
  {
    key: "mfiName",
    value: cml.header('mfiName')
  },
  {
    key: "amountDue",
    value: amountDue
  },
  {
    key: "dueDate",
    value: dueDate
  }
]);

{
  "quoteId": origPayload.quoteId,
  "transactionId": origPayload.transactionId,
  "transferAmount": if (cml.header('requestAmount') == "0") then amountDue else cml.header('requestAmount'),
  "transferAmountCurrency": origPayload.currency,
  "payeeReceiveAmount": if (cml.header('requestAmount') == "0") then amountDue else cml.header('requestAmount'),
  "payeeReceiveAmountCurrency": origPayload.currency,
  "payeeFspFeeAmount": "0",
  "payeeFspFeeAmountCurrency": origPayload.currency,
  "payeeFspCommissionAmount": "0",
  "payeeFspCommissionAmountCurrency": origPayload.currency,
  [if (extensionList != [])
   then "extensionList"]: extensionList
}